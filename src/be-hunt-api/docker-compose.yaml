version: '3.8'

services:

  # RabbitMQ Message Bus
  rabbitmq:
    container_name: message-bus
    image: rabbitmq:3.12-management
    ports:
        - 5672:5672
        - 15672:15672
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 10s
      retries: 5

  # NGNIX Reverse Proxy
  ngnix:
    container_name: proxy
    build: Proxy
    ports:
      - 5500:5500
    depends_on:
      - hunts-api
      - participants-api

  # Hunts Api Setup
  hunts-api:
    container_name: hunts-api
    env_file: .env
    build:
      context: .
      dockerfile: Hunts.Api/Dockerfile
    depends_on:
      hunts-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__HuntsDbConnection: Server=hunts-db;Database=${HUNTS_DB_NAME};User=root;Password=${HUNTS_DB_ROOT_PWD}
      RabbitMQHost: message-bus
    ports:
      - "5000:7105"

  # Hunts Database Setup
  hunts-db:
    container_name: hunts-db
    image: mysql:latest
    env_file: .env
    ports:
      - 3366:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${HUNTS_DB_ROOT_PWD}
      MYSQL_DATABASE: ${HUNTS_DB_NAME}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Hunts Migrations Setup
  hunts-migrations:
    container_name: hunts-migrations
    image: scavenger-hunts-migrations
    env_file: .env
    build:
      context: .
      dockerfile: Hunts.Infrastructure/Dockerfile
      target: migrations
    depends_on:
      hunts-db:
        condition: service_healthy
    command: ["dotnet-ef", "database", "update", "--project", "Hunts.Infrastructure/", "--startup-project", "Hunts.Api/"]
    environment:
      ConnectionStrings__HuntsDbConnection: Server=hunts-db;Database=${HUNTS_DB_NAME};User=root;Password=${HUNTS_DB_ROOT_PWD}

  # Participants Api Setup
  participants-api:
    container_name: participants-api
    env_file: .env
    build:
      context: .
      dockerfile: Participants.Api/Dockerfile
    depends_on:
      participants-db:
        condition: service_healthy
      participants-cache:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings__ParticipantsDbConnection: Server=participants-db;Database=${PARTICIPANTS_DB_NAME};User=root;Password=${PARTICIPANTS_DB_ROOT_PWD}
      ConnectionStrings__ParticipantsCacheConnection: participants-cache
      RabbitMQHost: message-bus
    ports:
      - "5100:7105"

  # Participants Database Setup
  participants-db:
    container_name: participants-db
    image: mysql:latest
    env_file: .env
    ports:
      - 3399:3306
    environment:
      MYSQL_ROOT_PASSWORD: ${PARTICIPANTS_DB_ROOT_PWD}
      MYSQL_DATABASE: ${PARTICIPANTS_DB_NAME}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Participants Migrations Setup
  participants-migrations:
    container_name: participants-migrations
    image: scavenger-participants-migrations
    env_file: .env
    build:
      context: .
      dockerfile: Participants.Infrastructure/Dockerfile
      target: migrations
    depends_on:
      participants-db:
        condition: service_healthy
      participants-cache:
        condition: service_healthy
    command: ["dotnet-ef", "database", "update", "--project", "Participants.Infrastructure/", "--startup-project", "Participants.Api/"]
    environment:
      ConnectionStrings__ParticipantsDbConnection: Server=participants-db;Database=${PARTICIPANTS_DB_NAME};User=root;Password=${PARTICIPANTS_DB_ROOT_PWD}
      ConnectionStrings__ParticipantsCacheConnection: participants-cache

  participants-cache:
    container_name: participants-cache
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
